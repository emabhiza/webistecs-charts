apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: logging
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    clients:
      - url: http://loki.logging.svc.cluster.local:3100/loki/api/v1/push

    scrape_configs:
      - job_name: kubernetes-logs
        static_configs:
          - targets: ['localhost']
            labels:
              job: kubernetes-logs
              __path__: /var/log/containers/webistecs-[a-zA-Z0-9]*.log

        pipeline_stages:
          # üõë Drop DEBUG logs before processing
          - drop:
              expression: ".*DEBUG.*"
              source: message

          # üéØ Extract pod, namespace, and container names
          - regex:
              expression: "^(?P<container>[^-]+)-(?P<pod>[^_]+)_(?P<namespace>[^_]+)_[^.]+\\.log$"
              source: __path__
              target: filename_data

          - template:
              source: 'Extracted data: {{ toJson .filename_data }}'
              target: debug_output

          - labels:
              pod: '{{ if .filename_data.pod }}{{ .filename_data.pod }}{{ else }}unknown{{ end }}'
              namespace: '{{ if .filename_data.namespace }}{{ .filename_data.namespace }}{{ else }}unknown{{ end }}'
              container: '{{ if .filename_data.container }}{{ .filename_data.container }}{{ else }}unknown{{ end }}'

          # üìå Support for multi-line logs (stack traces, exceptions, etc.)
          - multiline:
              firstline: '^\S.*Exception:|\S.*Error:|\S.*Trace:|\S.*INF\] \[.*\]'
              max_wait_time: 10s
              continue_through: '^(?!\[\d{2}:\d{2}:\d{2}\.\d{3} \w{3}\])'

          - drop:
              expression: "^(Caused by:|Traceback)"
              source: message

          - multiline:
              firstline: '^\S.*'
              max_lines: 500
              continue_through: '^\s+at\s|\s+---\s|^\S.*INF\] \[.*\]'
          - output:
              source: "multiline stage output: {{.message}}"

          # üõ†Ô∏è Strip timestamp and metadata from all lines
          - regex:
              expression: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z\s+stdout\s+F\s+(?P<message>.*)$'
              source: message
              replace: '{{ .message }}'
          - output:
              source: "Regex stage output: {{.message}}"

          # Extract structured log details (Time, Level, Component, Message)
          - regex:
              expression: '^\[(?P<time>\d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>\w{3})\] \[(?P<component>[^\]]+)\] (?P<msg>.+)$'
              source: message

          - labels:
              level: '{{ .level }}'
              component: '{{ .component }}'

          # üè∑ Extract HTTP status codes from logs
          - regex:
              expression: '.*http request (?:success|failure) (?P<http_status>\d{3}).*'
              source: msg

          - labels:
              http_status: '{{ if .http_status }}{{ .http_status }}{{ else }}unknown{{ end }}'

          # üö® Capture exceptions/errors for better alerting
          - regex:
              expression: '^(?P<exception>.*(Exception|Error).*)$'
              source: msg
              target: exception_info

          - labels:
              exception: '{{ if .exception_info.exception }}true{{ else }}false{{ end }}'

          # üì¢ Format output logs for cleaner display
          - output:
              source: "[{{ .time }} {{ .level }}] [{{ .component }}] {{ .msg }}"