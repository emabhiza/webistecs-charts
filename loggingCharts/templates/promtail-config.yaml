apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: logging
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    clients:
      - url: http://loki.logging.svc.cluster.local:3100/loki/api/v1/push

    scrape_configs:
      - job_name: kubernetes-logs
        static_configs:
          - targets: ['localhost']
            labels:
              job: kubernetes-logs
              __path__: /var/log/containers/webistecs-6bb7bb9f57-ss5mv_default_my-container-*.log

        pipeline_stages:
          # Debug: Log the raw log entry
          - template:
              source: |
                Raw log entry: {{ .__line__ }}
              target: debug_raw_log

          # Drop logs from unwanted containers (e.g., util, monitor, prometheus, node)
          - drop:
              expression: "webistecs-(util|monitor|prometheus|node)"
              source: __path__

          # Drop DEBUG logs before processing
          - drop:
              expression: ".*DEBUG.*"
              source: message

          # Extract pod, namespace, and container from filename
          - regex:
              expression: "^(?P<pod>[a-zA-Z0-9-]+)_(?P<namespace>[a-zA-Z0-9-]+)_(?P<container>[a-zA-Z0-9-]+)-[a-f0-9]+\\.log$"
              source: __path__
              target: filename_data

          # Debug extracted fields
          - template:
              source: |
                Extracted fields: pod={{ .pod }}, namespace={{ .namespace }}, container={{ .container }}
              target: debug_extracted_fields

          - labels:
              pod: '{{ if .pod }}{{ .pod }}{{ else }}unknown{{ end }}'
              namespace: '{{ if .namespace }}{{ .namespace }}{{ else }}default{{ end }}'
              container: '{{ if .container }}{{ .container }}{{ else }}unknown{{ end }}'

          # Support for multi-line logs
          - multiline:
              firstline: '^\[\d{2}:\d{2}:\d{2}\.\d{3} \w{3}\]'
              max_wait_time: 10s
              continue_through: '^(?!\[\d{2}:\d{2}:\d{2}\.\d{3} \w{3}\])'

          - drop:
              expression: "^(Caused by:|Traceback)"
              source: message

          - multiline:
              firstline: '^\S.*'
              max_lines: 500
              max_wait_time: 3s

          - template:
              source: |
                Multiline output: {{ .message }}
              target: debug_multiline_output

          # Extract structured log details (Time, Level, Component, Message)
          - regex:
              expression: '^\[(?P<time>\d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>\w{3})\] \[(?P<component>[^\]]+)\] (?P<msg>.+)$'
              source: message

          - labels:
              level: '{{ .level }}'
              component: '{{ .component }}'

          # Ensure timestamps include milliseconds
          - timestamp:
              source: time
              format: "15:04:05.000"
              location: Europe/London
              action: replace

          # Debug final log entry
          - template:
              source: |
                Final log entry: time={{ .time }}, level={{ .level }}, component={{ .component }}, msg={{ .msg }}
              target: debug_final_log