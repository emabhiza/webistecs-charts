apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "5"  # Ensures this runs first
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
    argocd-image-updater.argoproj.io/image-list: myrepo/migration, myrepo/websitecs
    argocd-image-updater.argoproj.io/myrepo.migration.update-strategy: latest
    argocd-image-updater.argoproj.io/myrepo.websitecs.update-strategy: latest
    argocd-image-updater.argoproj.io/myrepo.migration.allow-tags: regexp:^beta-[0-9]+\.[0-9]+$
    argocd-image-updater.argoproj.io/myrepo.websitecs.allow-tags: regexp:^beta-[0-9]+\.[0-9]+$
    checksum/config: "{{ printf "%s:%s" .Values.dbMigrationJob.image.repository .Values.dbMigrationJob.image.tag | sha256sum }}"


spec:
  template:
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: migration
          image: "{{ .Values.dbMigrationJob.image.repository }}:{{ .Values.dbMigrationJob.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "{{ .Values.dbMigrationJob.environment.aspNetCoreEnvironment }}"
            - name: ConnectionStrings__WebistecsContext
              value: "{{ .Values.dbMigrationJob.environment.webistecsContext }}"
          resources:
            requests:
              memory: "{{ .Values.dbMigrationJob.resources.requests.memory }}"
              cpu: "{{ .Values.dbMigrationJob.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.dbMigrationJob.resources.limits.memory }}"
              cpu: "{{ .Values.dbMigrationJob.resources.limits.cpu }}"
          volumeMounts:
            - name: db-storage
              mountPath: /db
      volumes:
        - name: db-storage
          persistentVolumeClaim:
            claimName: webistecs-db-pvc
      restartPolicy: Never