apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: monitoring
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    clients:
      - url: http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push

    scrape_configs:
      - job_name: kubernetes-logs
        static_configs:
          - targets: ['localhost']
            labels:
              job: kubernetes-logs
              __path__: /var/log/containers/webistecs-[a-zA-Z0-9]*.log

        pipeline_stages:
          # Drop DEBUG logs before processing
          - drop:
              expression: ".*DEBUG.*"
              source: message

          # Extract pod, namespace, and container from filename
          - regex:
              expression: "^(?P<pod>[^_]+)_(?P<namespace>[^_]+)_(?P<container>[^-]+)-[a-f0-9]+\\.log$"
              source: __path__

          # Debug extracted fields
          - template:
              source: 'Extracted fields: pod={{ .pod }}, namespace={{ .namespace }}, container={{ .container }}'
              target: debug_output

          - labels:
              pod: '{{ .pod }}'
              namespace: '{{ .namespace }}'
              container: '{{ .container }}'

          # Support for multi-line logs
          - multiline:
              firstline: '^\['
              max_wait_time: 3s

          # Extract structured log details (Time, Level, Component, Message)
          - regex:
              expression: '^\[(?P<time>\d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>\w{3})\] \[(?P<component>[^\]]+)\] (?P<msg>.+)$'
              source: message

          - labels:
              level: '{{ .level }}'
              component: '{{ .component }}'

          # Ensure timestamps include milliseconds
          - timestamp:
              source: time
              format: "15:04:05.000"
              location: Europe/London
              action: replace

          # Extract HTTP status codes from logs
          - regex:
              expression: '.*http request (?:success|failure) (?P<http_status>\d{3}).*'
              source: msg

          - labels:
              http_status: '{{ if .http_status }}{{ .http_status }}{{ else }}unknown{{ end }}'

          # Capture exceptions/errors for better alerting
          - regex:
              expression: '^(?P<exception>.*(Exception|Error).*)$'
              source: msg
              target: exception_info

          - labels:
              exception: '{{ if .exception_info.exception }}true{{ else }}false{{ end }}'

          # Format output logs for cleaner display
          - output:
              source: "[{{ .time }} {{ .level }}] [{{ .component }}] {{ .msg }}"