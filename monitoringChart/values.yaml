global:
  namespace: monitoring
  macMiniIP: 192.168.68.109

prometheus:
  name: "prometheus"
  affinity: {}
  nodeSelector: { }  # This clears node selector
  tolerations: [ ]   # Clears any tolerations
  labels:
    app: "prometheus"
    component: "server"
  replicas: 1
  image:
    repository: "prom/prometheus"
    tag: "v2.48.0"  # Pinned stable version
  scrapeInterval: "1m"
  args:
    configFile: "/etc/prometheus/prometheus.yml"
    retentionTime: "30d"
  ports:
    containerPort: 9090
    nodePort: 30090
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  volumeMounts:
    config:
      name: "config-volume"
      mountPath: "/etc/prometheus"
    data:
      name: "prometheus-data"
      mountPath: "/prometheus/data"
  pvc:
    name: "prometheus-pvc"
    storage: "50Gi"
    storageClassName: "local-storage"
    accessModes:
      - ReadWriteOnce  # fixed: must be a list
    matchLabels:
      type: "prometheus"
  service:
    type: NodePort
  configMap:
    name: prometheus-config
    labels:
      mylabel: prometheus-configmap
    scrapeConfigs:
      kubernetesPods: "kubernetes-pods"
      kubeStateMetrics: "kube-state-metrics"
      websitecs: "websitecs"
      nodeExporter: "node-exporter"
      coinmarketcapExporterTarget: "192.168.68.109:32005"
      websitecsTarget: "192.168.68.109:30080"
      nodeExporterTarget: "node-exporter.monitoring.svc.cluster.local:9100"
  securityContext:
    runAsUser: 65534 
    runAsGroup: 65534
    fsGroup: 65534

prometheusNodeExporter:
  enabled: true
  name: node-exporter
  replicaCount: 1
  image:
    repository: prom/node-exporter
    tag: "v1.5.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9100
    targetPort: 9100
  resources: {}
