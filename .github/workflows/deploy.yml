on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "ArgoCD CLI installed."
          echo "Adding $HOME/bin to PATH"
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Send Telegram Message - Deployment Started
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

          MESSAGE=$(jq -n \
            --arg actor "${{ github.actor }}" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref }}" \
            --arg machine "${{ runner.name }}" \
            '{text: "🚀 <b>Deployment Started!</b>\n👤 <b>Triggered by:</b> \($actor)\n📦 <b>Repository:</b> \($repo)\n🔀 <b>Branch:</b> \($branch)\n💻 <b>Runner:</b> \($machine)\n⏳ <b>Status:</b> In Progress..."}')

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
               -H "Content-Type: application/json" \
               -d "{
                    \"chat_id\": \"${{ secrets.TELEGRAM__CHATID }}\",
                    \"parse_mode\": \"HTML\",
                    \"text\": $(echo "$MESSAGE" | jq -r '.text')
               }"

      - name: Debug - Show ArgoCD CLI version
        run: |
          echo "Checking ArgoCD CLI version..."
          argocd version --short
          echo "ArgoCD CLI version checked."

      - name: Debug - Log into ArgoCD
        run: |
          echo "Attempting ArgoCD login..."
          argocd login 192.168.68.107:30007 --username admin --password Gsquad238 --insecure
          echo "Logged into ArgoCD."

      - name: Debug - Get Latest Docker Image Tag
        id: get_image_tag
        run: |
          echo "Checking for the latest Docker image tag..."
          latest_tag=$(curl -s https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/ | jq -r '.results[0].name')
          echo "Latest Docker image tag fetched: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Docker image tag checked."

      - name: Store Previous Image Tag
        id: store_old_tag
        run: |
          old_tag=$(grep 'tag:' webistecs/values.yaml | head -1 | awk '{print $2}' | tr -d '"')
          echo "Previous image tag: $old_tag"
          echo "old_tag=$old_tag" >> $GITHUB_ENV

      - name: Update Helm Chart with Latest Docker Tag for Webistecs Image
        run: |
          echo "Updating webistecs image tag in values.yaml to ${{ env.latest_tag }}..."
          sed -i 's/tag: .*/tag: "${{ env.latest_tag }}"/' webistecs/values.yaml
          echo "Updated values.yaml for webistecs image"

      - name: Commit and push changes to values.yaml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Update webistecs image tag to ${{ env.latest_tag }}"
          git push

      - name: Debug - Sync ArgoCD and Check for Failure
        if: steps.image_changed.outputs.image_changed == 'true'
        id: argocd_sync
        continue-on-error: true
        run: |
          echo "Starting ArgoCD sync for 'webistecs'..."
          if ! argocd app sync webistecs; then
            echo "ArgoCD sync failed!"
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "ArgoCD sync complete."
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Rollback Image Tag if ArgoCD Sync Fails
        if: env.sync_failed == 'true'
        run: |
          echo "Rolling back image tag in values.yaml to previous tag: ${{ env.old_tag }}..."
          sed -i 's/tag: .*/tag: "${{ env.old_tag }}"/' webistecs/values.yaml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Rollback: Restore image tag to ${{ env.old_tag }} due to failed ArgoCD sync"
          git push
          echo "Rollback complete."

      - name: Send Telegram Message - Deployment Success
        if: steps.image_changed.outputs.image_changed == 'true' && env.sync_failed == 'false'
        run: |
          END_TIME=$(date +%s)
          DEPLOY_TIME=$((END_TIME - $START_TIME))

          MESSAGE=$(jq -n \
            --arg actor "${{ github.actor }}" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref }}" \
            --arg latest_tag "${{ env.latest_tag }}" \
            --arg deploy_time "$DEPLOY_TIME" \
            '{text: "✅ <b>Deployment Successful!</b>\n👤 <b>Deployed by:</b> \($actor)\n📦 <b>Repository:</b> \($repo)\n🔀 <b>Branch:</b> \($branch)\n🏷️ <b>Version:</b> \($latest_tag)\n⏳ <b>Deployment Time:</b> \($deploy_time) sec\n🚀 <b>Status:</b> Success!"}')

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
               -H "Content-Type: application/json" \
               -d "{
                    \"chat_id\": \"${{ secrets.TELEGRAM__CHATID }}\",
                    \"parse_mode\": \"HTML\",
                    \"text\": $(echo "$MESSAGE" | jq -r '.text')
               }"

      - name: Send Telegram Message - Deployment Failed
        if: env.sync_failed == 'true'
        run: |
          MESSAGE=$(jq -n \
            --arg actor "${{ github.actor }}" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref }}" \
            --arg latest_tag "${{ env.latest_tag }}" \
            --arg old_tag "${{ env.old_tag }}" \
            '{text: "❌ <b>Deployment Failed!</b>\n👤 <b>Triggered by:</b> \($actor)\n📦 <b>Repository:</b> \($repo)\n🔀 <b>Branch:</b> \($branch)\n🏷️ <b>Attempted Version:</b> \($latest_tag)\n🔄 <b>Rolled Back to:</b> \($old_tag)\n🚨 <b>Status:</b> Rollback Complete"}')

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
               -H "Content-Type: application/json" \
               -d "{
                    \"chat_id\": \"${{ secrets.TELEGRAM__CHATID }}\",
                    \"parse_mode\": \"HTML\",
                    \"text\": $(echo "$MESSAGE" | jq -r '.text')
               }"

      - name: Debug - Store new image tag (update GitHub secret)
        if: steps.image_changed.outputs.image_changed == 'true' && env.sync_failed == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Updating LATEST_TAG GitHub secret..."
          gh secret set LATEST_TAG --body="${{ env.latest_tag }}"
          echo "LATEST_TAG secret updated."
