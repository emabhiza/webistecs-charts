name: ArgoCD Pipeline

on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'
      environment:
        description: 'Deployment environment (prod or test)'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Define Telegram Function
        shell: bash
        run: |
          send_telegram() {
            local status="$1"
            local message="$2"

            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
                "parse_mode": "HTML",
                "text": "'"$status\n$message"'"
              }'
          }
          declare -f send_telegram >> $GITHUB_ENV

      - name: ArgoCD Login
        run: |
          argocd login 192.168.68.107:30007 \
            --username admin \
            --password $ARGOCD_PASSWORD \
            --insecure || {
              send_telegram "‚ùå <b>ArgoCD Login Failed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüö´ Could not login to ArgoCD."
              echo "sync_failed=true" >> $GITHUB_ENV
              exit 1
            }
        env:
          ARGOCD_PASSWORD: ${{ secrets.ARGO_PASSWORD }}

      - name: Get Latest Docker Image Tag (Environment-aware)
        id: get_image_tag_api
        run: |
          IMAGE_NAME="emabhiza/webistecs"
          AUTH_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER__USERNAME }}", "password": "${{ secrets.DOCKER_HUBPAT }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAGS=$(curl -s -H "Authorization: JWT ${AUTH_TOKEN}" "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=100" | jq -r '.results[].name')

          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            latest_tag=$(echo "$TAGS" | grep -oP '^v\d+\.\d+\.\d+' | sort -V | tail -n 1)
          else
            latest_tag=$(echo "$TAGS" | grep -oP '^test-\d+\.\d+\.\d+' | sort -V | tail -n 1)
          fi

          if [ -z "$latest_tag" ]; then
            send_telegram "‚ùå <b>Deployment Failed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüö´ No suitable Docker tag found."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

          echo "‚úÖ Latest tag for ${{ github.event.inputs.environment }}: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Set Environment-specific Helm Values and App
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            VALUES_FILE="webistecs/values-prod.yaml"
            ARGO_APP="webistecs"
          else
            VALUES_FILE="webistecs/values-test.yaml"
            ARGO_APP="webistecs-test"
          fi

          echo "VALUES_FILE=$VALUES_FILE" >> $GITHUB_ENV
          echo "ARGO_APP=$ARGO_APP" >> $GITHUB_ENV

      - name: Check if Tag Already Deployed
        run: |
          old_tag=$(grep 'tag:' $VALUES_FILE | head -1 | awk '{print $2}' | tr -d '"')
          echo "old_tag=$old_tag" >> $GITHUB_ENV

          if [[ "$old_tag" == "$latest_tag" ]]; then
            echo "same_tag=true" >> $GITHUB_ENV
            send_telegram "‚ö†Ô∏è <b>Same image tag already deployed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüè∑Ô∏è <b>Tag:</b> $latest_tag\n‚úÖ Continuing without update."
          else
            echo "same_tag=false" >> $GITHUB_ENV
          fi

      - name: Wait for New Docker Image to Be Available
        run: |
          for i in {1..10}; do
            if curl -s "https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/${{ env.latest_tag }}" | jq -e .; then
              echo "‚úÖ New Docker image found!"
              exit 0
            fi
            echo "‚è≥ Docker image not found. Retrying in 30 seconds..."
            sleep 30
          done

          send_telegram "‚ùå <b>Image Not Found</b>" "üè∑Ô∏è <b>Tag:</b> $latest_tag not found in Docker Hub."
          echo "sync_failed=true" >> $GITHUB_ENV
          exit 1

      - name: Send Telegram Message - Deployment Started
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

          send_telegram "üöÄ <b>Deployment Started</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüì¶ <b>App:</b> $ARGO_APP\nüè∑Ô∏è <b>From:</b> $old_tag ‚Üí $latest_tag\n‚è≥ Status: In Progress..."

      - name: Update Helm Chart with Latest Docker Tag
        if: env.same_tag != 'true'
        run: |
          sed -i 's/tag: .*/tag: "$latest_tag"/' $VALUES_FILE

      - name: Commit and Push Changes
        if: env.same_tag != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Update ${{ github.event.inputs.environment }} image tag to $latest_tag"
          git push

      - name: Force ArgoCD Sync
        run: |
          if ! argocd app sync --force $ARGO_APP; then
            send_telegram "‚ùå <b>ArgoCD Sync Failed</b>" "üì¶ <b>App:</b> $ARGO_APP\nüö® Sync command failed."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Check Deployment Status
        if: env.sync_failed == 'false'
        run: |
          STATUS=$(argocd app get $ARGO_APP --output json | jq -r '.status.operationState.phase')

          if [[ "$STATUS" != "Succeeded" ]]; then
            send_telegram "‚ùå <b>Deployment Status: $STATUS</b>" "üì¶ <b>App:</b> $ARGO_APP\nüö® ArgoCD did not complete successfully."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Rollback Image Tag on Failure
        if: env.sync_failed == 'true'
        run: |
          sed -i 's/tag: .*/tag: "$old_tag"/' $VALUES_FILE

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Rollback: Restore image tag to $old_tag due to failed ArgoCD sync"
          git push
          echo "Rollback complete."

      - name: Final Telegram - Status Summary
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          if [[ "$sync_failed" == "true" ]]; then
            send_telegram "‚ùå <b>Deployment Failed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüì¶ <b>App:</b> $ARGO_APP\nüè∑Ô∏è <b>Attempted:</b> $latest_tag\n‚è≥ Rollback complete."
          elif [[ "$same_tag" == "true" ]]; then
            echo "Same tag deployment complete. No telegram needed."
          else
            send_telegram "‚úÖ <b>Deployment Success</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüì¶ <b>App:</b> $ARGO_APP\nüè∑Ô∏è <b>From:</b> $old_tag ‚Üí $latest_tag\n‚è≥ Time: ${DURATION}s"

      - name: Update GitHub Secret with New Tag (optional)
        if: env.sync_failed == 'false' && env.same_tag != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh secret set LATEST_TAG --body="$latest_tag"
          echo "GitHub secret LATEST_TAG updated to $latest_tag"