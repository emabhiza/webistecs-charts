name: ArgoCD Pipeline

on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'
      environment:
        description: 'Deployment environment (prod or test)'
        required: true
        default: 'test'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: ArgoCD Login
        run: |
          if ! argocd login 192.168.68.107:30007 \
            --username admin \
            --password $ARGOCD_PASSWORD \
            --insecure; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>ArgoCD Login Failed</b>\nüë§ <b>User:</b> '"${{ github.actor }}"'\nüö´ Could not login to ArgoCD."
              }'
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
        env:
          ARGOCD_PASSWORD: ${{ secrets.ARGO_PASSWORD }}

      - name: Get Latest Docker Image Tag
        id: get_tag
        run: |
          IMAGE_NAME="emabhiza/webistecs"
          
          # Safely generate authentication payload using jq
          auth_payload=$(jq -n \
            --arg username "${{ secrets.DOCKER__USERNAME }}" \
            --arg password "${{ secrets.DOCKER_HUBPAT }}" \
            '{
              username: $username,
              password: $password
            }')
          
          # Get authentication token
          AUTH_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d "$auth_payload" \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          if [ -z "$AUTH_TOKEN" ]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>Docker Hub Auth Failed</b>\nüë§ <b>User:</b> '"${{ github.actor }}"'\nüîê Could not authenticate with Docker Hub"
              }'
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          
          # Get tags with proper authentication
          TAGS=$(curl -s -H "Authorization: JWT ${AUTH_TOKEN}" \
            "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=100" | \
            jq -r '.results[].name')
          
          # Determine tag based on environment
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            latest_tag=$(echo "$TAGS" | grep -oP '^v\d+\.\d+\.\d+' | sort -V | tail -n 1)
          else
            latest_tag=$(echo "$TAGS" | grep -oP '^test-\d+\.\d+\.\d+' | sort -V | tail -n 1)
          fi
          
          if [ -z "$latest_tag" ]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>Deployment Failed</b>\nüë§ <b>User:</b> '"${{ github.actor }}"'\nüö´ No suitable Docker tag found for '"${{ github.event.inputs.environment }}"' environment"
              }'
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Found tag: $latest_tag"

      - name: Set Helm & App Info
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "VALUES_FILE=webistecs/values-prod.yaml" >> $GITHUB_ENV
            echo "ARGO_APP=webistecs" >> $GITHUB_ENV
          else
            echo "VALUES_FILE=webistecs/values-test.yaml" >> $GITHUB_ENV
            echo "ARGO_APP=webistecs-test" >> $GITHUB_ENV
          fi

      - name: Check if Tag Already Deployed
        run: |
          old_tag=$(grep 'tag:' $VALUES_FILE | head -1 | awk '{print $2}' | tr -d '"')
          echo "old_tag=$old_tag" >> $GITHUB_ENV
          
          if [[ "$old_tag" == "$latest_tag" ]]; then
            echo "same_tag=true" >> $GITHUB_ENV
            BORDER="========================"
            MESSAGE="
              ${BORDER}
              ‚ö†Ô∏è <b>SAME TAG DEPLOYED</b> ‚ö†Ô∏è
              ${BORDER}
              üë§ <b>User:</b> ${{ github.actor }}
              üè∑Ô∏è <b>Tag:</b> $latest_tag
              ${BORDER}
              "
                   curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
              "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
              "parse_mode": "HTML",
              "text": "'"$MESSAGE"'"
          }'
                 else
                   echo "same_tag=false" >> $GITHUB_ENV
                 fi

      - name: Wait for Docker Image
        run: |
          BORDER="===================================="
          
          for i in {1..10}; do
            if curl -s "https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/${latest_tag}" | jq -e .; then
              echo "‚úÖ Image is available!"
              exit 0
            fi
            echo "Waiting for Docker image..."
            sleep 30
          done
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
              "parse_mode": "HTML",
              "text": "‚ùå <b>Image Not Found</b>\nüè∑Ô∏è <b>Tag:</b> '$latest_tag'\n<b>========================================================================</b>"
            }'
          
          echo "sync_failed=true" >> $GITHUB_ENV
          exit 1

      - name: Notify Start
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
              "parse_mode": "HTML",
              "text": "üöÄ <b>ArgoCD Deployment Started</b>\nüë§ <b>User:</b> '"${{ github.actor }}"'\nüì¶ <b>App:</b> '"$ARGO_APP"'\nüè∑Ô∏è <b>Tag:</b> '"$latest_tag"'"
            }'

      - name: Update Tag in Helm Chart
        if: env.same_tag != 'true'
        run: |
          sed -i 's/tag: .*/tag: "'${{ env.latest_tag }}'"/' "${{ env.VALUES_FILE }}"

      - name: Commit & Push Helm Change
        if: env.same_tag != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Update test tag to $latest_tag"
          git pull --rebase  # This fixes the "non-fast-forward" error
          git push

      - name: Verify ArgoCD Login
        run: |
          echo "üîç Current ArgoCD Context:"
          argocd context
          echo "üîê Logged-in User Info:"
          argocd account get-user-info

      - name: ArgoCD Sync
        if: env.same_tag != 'true'
        run: |
          echo "Trying to sync app: ${ARGO_APP:-unset}"
          BORDER="===================================="
          
          if ! argocd app sync --force $ARGO_APP; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>ArgoCD Sync Failed</b>\nüì¶ <b>App:</b> '$ARGO_APP'\n<b>========================================================================</b>"
              }'
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Check Sync Status
        run: |
          STATUS=$(argocd app get $ARGO_APP --output json | jq -r '.status.operationState.phase')
          if [[ "$STATUS" != "Succeeded" ]]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>Deployment Failed</b>\nüì¶ <b>App:</b> '"$ARGO_APP"'\nStatus: '"$STATUS"'"
              }'
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Rollback on Failure
        if: env.sync_failed == 'true'
        run: |
          sed -i 's/tag: .*/tag: "'$old_tag'"/' $VALUES_FILE
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Rollback: Restore to $old_tag"
          git push

      - name: Final Telegram Summary
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          BORDER="===================================="
          
          if [[ "$sync_failed" == "true" ]]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚ùå <b>DEPLOYMENT FAILED</b> ‚ùå\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> '$ARGO_APP'\nüîÑ <b>Rollback to:</b> '$old_tag'\n‚è±Ô∏è <b>Duration:</b> '${DURATION}'s\n<b>========================================================================</b>"
              }'
          elif [[ "$same_tag" != "true" ]]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "'"${{ secrets.TELEGRAM__CHATID }}"'",
                "parse_mode": "HTML",
                "text": "‚úÖ <b>DEPLOYMENT SUCCESS</b> ‚úÖ\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> '$ARGO_APP'\nüÜï <b>New Version:</b> '$latest_tag'\nüîÑ <b>Previous Version:</b> '$old_tag'\n‚è±Ô∏è <b>Duration:</b> '${DURATION}'s\n<b>========================================================================</b>"
              }'
          fi

      - name: Update GitHub Secret with Latest Tag
        if: env.sync_failed == 'false' && env.same_tag != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: gh secret set LATEST_TAG --body="$latest_tag"