name: Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      deploy_to_prod:
        description: 'Deploy to production?'
        required: true
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]
    
    steps:
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Set Version Manually
        run: |
          # ==========================
          # CHANGE THE VERSION HERE
          # ==========================
          NEW_VERSION="0.0.2"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          

    
      - name: Get Last Commit Details
        id: commit_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" || echo "No commit message")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" || echo "Unknown Author")
          COMMIT_HASH=$(git log -1 --pretty=format:"%h" || echo "Unknown Hash")
          
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Send Start Deployment Message
        run: |
          if ${{ github.event.inputs.deploy_to_prod }}; then
            ENVIRONMENT="Production"
          else
            ENVIRONMENT="Staging"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "-1002261960073",
            "parse_mode": "HTML",
            "text": "üöÄ <b>Starting Deployment</b>\nüë§ <b>Deployed by:</b> '${{ github.actor }}'\nüåç <b>Environment:</b> '$ENVIRONMENT'\nüè∑Ô∏è <b>Version:</b> '${{ env.VERSION }}'\nüìù <b>Commit:</b> '$COMMIT_HASH' - '$COMMIT_MESSAGE'\nüë®‚Äçüíª <b>Author:</b> '$COMMIT_AUTHOR'"
          }'

      - name: Add .NET to PATH
        run: echo "$HOME/dotnet" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER__USERNAME }}
          password: ${{ secrets.DOCKER__ACCESSTOKEN }}

      - name: Build and push Webistecs Docker image
        id: build_web_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Trader/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER__USERNAME }}/webistecs:${{ env.VERSION }}

      - name: Build and push Migration Docker image
        id: build_migration_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Infrastructure/Migrations/Deployment/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER__USERNAME }}/webistecs-migrations:${{ env.VERSION }}

      - name: Send Success or Failure Message
        if: always()
        run: |
          BUILD_RESULT="${{ steps.build_application.outcome || 'N/A' }}"
          WEB_IMAGE_RESULT="${{ steps.build_web_image.outcome || 'N/A' }}"
          MIGRATION_IMAGE_RESULT="${{ steps.build_migration_image.outcome || 'N/A' }}"

          if ${{ github.event.inputs.deploy_to_prod }}; then
            ENVIRONMENT="Production"
          else
            ENVIRONMENT="Staging"
          fi
          
          if [[ "$BUILD_RESULT" == "success" && "$WEB_IMAGE_RESULT" == "success" && "$MIGRATION_IMAGE_RESULT" == "success" ]]; then
            MESSAGE="‚úÖ <b>Deployment Successful!</b>\nüë§ <b>Deployed by:</b> '${{ github.actor }}'\nüåç <b>Environment:</b> '${ENVIRONMENT}'\nüè∑Ô∏è <b>Version:</b> '${{ env.VERSION }}'\n‚è≥ <b>Please wait for the next deployment to start...</b>"
          else
            MESSAGE="‚ùå <b>Deployment Failed!</b>\nüë§ <b>Deployed by:</b> '${{ github.actor }}'\nüåç <b>Environment:</b> '${ENVIRONMENT}'\nüè∑Ô∏è <b>Version:</b> '${{ env.VERSION }}'\nüö® <b>Errors:</b>\n - Build: ${BUILD_RESULT}\n - Web Image: ${WEB_IMAGE_RESULT}\n - Migration Image: ${MIGRATION_IMAGE_RESULT}"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "-1002261960073",
            "parse_mode": "HTML",
            "text": "'"$MESSAGE"'"
          }'
