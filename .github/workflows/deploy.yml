on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "ArgoCD CLI installed."
          echo "Adding $HOME/bin to PATH"
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUBPAT }}" | docker login -u "${{ secrets.DOCKER__USERNAME }}" --password-stdin

      - name: Get Latest Docker Image Tag (Docker CLI)
        id: get_image_tag_cli
        run: |
          echo "Fetching latest Docker image tag using Docker CLI..."
          latest_tag=$(docker pull emabhiza/webistecs:latest --quiet | grep -oP 'sha256:\K.*')

          if [ -z "$latest_tag" ]; then
            echo "Error: Unable to fetch the latest tag using Docker CLI."
            exit 1
          fi

          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest Docker image tag (CLI): $latest_tag"  
          
      - name: Send Telegram Message - Deployment Started
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "üöÄ <b>ArgoCD Deployment!</b>\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüè∑Ô∏è <b>Target Version:</b> '${{ env.latest_tag }}'\n‚è≥ <b>Status:</b> In Progress..."
          }'

      - name: Update Helm Chart with Latest Docker Tag
        run: |
          echo "Updating values.yaml with new image tag..."
          sed -i 's/tag: .*/tag: "${{ env.latest_tag }}"/' webistecs/values.yaml
          echo "Updated values.yaml"

      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Update image tag to ${{ env.latest_tag }}"
          git push

      - name: Force Sync ArgoCD and Check for Failure
        id: argocd_sync
        continue-on-error: true
        run: |
          echo "Forcing ArgoCD sync..."
          if ! argocd app sync --force webistecs; then
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Check Deployment Status in ArgoCD
        id: check_argocd_status
        run: |
          echo "Checking deployment status..."
          DEPLOYMENT_STATUS=$(argocd app get webistecs --output json | jq -r '.status.operationState.phase')

          if [[ "$DEPLOYMENT_STATUS" == "Failed" ]]; then
            echo "ArgoCD deployment failed. Image might not exist."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Send Logs on Failure (if needed)
        if: env.sync_failed == 'true'
        run: |
          LOGS=$(kubectl logs -l app=webistecs --tail=20)

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "‚ö†Ô∏è <b>Deployment Failed! Logs:</b>\n<pre>'"$LOGS"'</pre>"
          }'

      - name: Rollback Image Tag if ArgoCD Sync Fails
        if: env.sync_failed == 'true'
        run: |
          echo "Rolling back to previous image tag: ${{ env.old_tag }}"
          sed -i 's/tag: .*/tag: "${{ env.old_tag }}"/' webistecs/values.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Rollback: Restore image tag to ${{ env.old_tag }} due to failed ArgoCD sync"
          git push
          echo "Rollback complete."

      - name: Send Telegram Message - Deployment Status
        run: |
          END_TIME=$(date +%s)
          DEPLOY_TIME=$((END_TIME - START_TIME))

          if [[ "${{ env.sync_failed }}" == "true" ]]; then
            MESSAGE="‚ùå <b>ArgoCD Deployment Failed!</b>\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> Webistecs\nüè∑Ô∏è <b>Attempted Version:</b> '${{ env.latest_tag }}'\nüö® <b>Status:</b> Rollback Complete"
          else
            MESSAGE="‚úÖ <b>ArgoCD Deployment Successful!</b>\nüë§ <b>Deployed by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> Webistecs\nüè∑Ô∏è <b>Version:</b> '${{ env.latest_tag }}'\n‚è≥ <b>Deployment Time:</b> '${DEPLOY_TIME} sec'\nüöÄ <b>Status:</b> Success!"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "'"$MESSAGE"'"
          }'

      - name: Debug - Store new image tag (update GitHub secret)
        if: env.sync_failed == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Updating LATEST_TAG GitHub secret..."
          gh secret set LATEST_TAG --body="${{ env.latest_tag }}"
          echo "LATEST_TAG secret updated."
