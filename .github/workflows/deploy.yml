name: ArgoCD Pipeline

on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'
      environment:
        description: 'Deployment environment (prod or test)'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Get Latest Docker Image Tag (Environment-aware)
        id: get_image_tag_api
        run: |
          echo "Fetching latest Docker image tag for environment '${{ github.event.inputs.environment }}'..."

          echo "${{ secrets.DOCKER_HUBPAT }}" | docker login -u "${{ secrets.DOCKER__USERNAME }}" --password-stdin

          IMAGE_NAME="emabhiza/webistecs"
          AUTH_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'"${{ secrets.DOCKER__USERNAME }}"'", "password": "'"${{ secrets.DOCKER_HUBPAT }}"'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAGS=$(curl -s -H "Authorization: JWT ${AUTH_TOKEN}" "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=100" | jq -r '.results[].name')

          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            latest_tag=$(echo "$TAGS" | grep -oP '^v\d+\.\d+\.\d+' | sort -V | tail -n 1)
          else
            latest_tag=$(echo "$TAGS" | grep -oP '^test-\d+\.\d+\.\d+' | sort -V | tail -n 1)
          fi

          if [ -z "$latest_tag" ]; then
            echo "‚ùå Error: No suitable image tag found for environment '${{ github.event.inputs.environment }}'"
            exit 1
          fi

          echo "‚úÖ Latest tag for ${{ github.event.inputs.environment }}: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Set Environment-specific Helm Values and App
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            VALUES_FILE="webistecs/values-prod.yaml"
            ARGO_APP="webistecs"
          else
            VALUES_FILE="webistecs/values-test.yaml"
            ARGO_APP="webistecs-test"
          fi

          echo "Using values file: $VALUES_FILE"
          echo "Target ArgoCD app: $ARGO_APP"

          echo "VALUES_FILE=$VALUES_FILE" >> $GITHUB_ENV
          echo "ARGO_APP=$ARGO_APP" >> $GITHUB_ENV

      - name: Wait for New Docker Image to Be Available
        run: |
          echo "Waiting for the new Docker image to be available in Docker Hub..."
          IMAGE_NAME="emabhiza/webistecs:${{ env.latest_tag }}"

          for i in {1..10}; do
            if curl -s "https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/${{ env.latest_tag }}" | jq -e .; then
              echo "‚úÖ New Docker image found!"
              exit 0
            fi
            echo "‚è≥ Docker image not found. Retrying in 30 seconds..."
            sleep 30
          done

          echo "‚ùå Error: Docker image not found after waiting. Exiting..."
          exit 1

      - name: Store Previous Image Tag
        id: store_old_tag
        run: |
          old_tag=$(grep 'tag:' ${{ env.VALUES_FILE }} | head -1 | awk '{print $2}' | tr -d '"')
          echo "Previous image tag: $old_tag"
          echo "old_tag=$old_tag" >> $GITHUB_ENV

      - name: Send Telegram Message - Deployment Started
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "üöÄ <b>ArgoCD Deployment!</b>\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüè∑Ô∏è <b>Previous Version:</b> '${{ env.old_tag }}'\nüè∑Ô∏è <b>New Target Version:</b> '${{ env.latest_tag }}'\n‚è≥ <b>Status:</b> In Progress..."
          }'

      - name: Update Helm Chart with Latest Docker Tag
        run: |
          echo "Updating image tag in ${{ env.VALUES_FILE }}..."
          sed -i 's/tag: .*/tag: "${{ env.latest_tag }}"/' ${{ env.VALUES_FILE }}

      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ env.VALUES_FILE }}
          git commit -m "Update ${{ github.event.inputs.environment }} image tag to ${{ env.latest_tag }}"
          git push

      - name: Force Sync ArgoCD and Check for Failure
        id: argocd_sync
        continue-on-error: true
        run: |
          echo "Forcing ArgoCD sync for ${{ env.ARGO_APP }}..."
          if ! argocd app sync --force ${{ env.ARGO_APP }}; then
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Check Deployment Status in ArgoCD
        id: check_argocd_status
        run: |
          echo "Checking deployment status..."
          DEPLOYMENT_STATUS=$(argocd app get ${{ env.ARGO_APP }} --output json | jq -r '.status.operationState.phase')

          if [[ "$DEPLOYMENT_STATUS" == "Failed" ]]; then
            echo "ArgoCD deployment failed. Image might not exist."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Send Logs on Failure (if needed)
        if: env.sync_failed == 'true'
        run: |
          LOGS=$(kubectl logs -l app=webistecs --tail=20)

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "‚ö†Ô∏è <b>Deployment Failed! Logs:</b>\n<pre>'"$LOGS"'</pre>"
          }'

      - name: Rollback Image Tag if ArgoCD Sync Fails
        if: env.sync_failed == 'true'
        run: |
          echo "Rolling back to previous image tag: ${{ env.old_tag }}"
          sed -i 's/tag: .*/tag: "${{ env.old_tag }}"/' ${{ env.VALUES_FILE }}

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ env.VALUES_FILE }}
          git commit -m "Rollback: Restore image tag to ${{ env.old_tag }} due to failed ArgoCD sync"
          git push
          echo "Rollback complete."

      - name: Send Telegram Message - Deployment Status
        run: |
          END_TIME=$(date +%s)
          DEPLOY_TIME=$((END_TIME - START_TIME))

          if [[ "${{ env.sync_failed }}" == "true" ]]; then
            MESSAGE="‚ùå <b>ArgoCD Deployment Failed!</b>\nüë§ <b>Triggered by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> ${{ env.ARGO_APP }}\nüè∑Ô∏è <b>Attempted Version:</b> '${{ env.latest_tag }}'\nüö® <b>Status:</b> Rollback Complete"
          else
            MESSAGE="‚úÖ <b>ArgoCD Deployment Successful!</b>\nüë§ <b>Deployed by:</b> '${{ github.actor }}'\nüì¶ <b>Application:</b> ${{ env.ARGO_APP }}\nüè∑Ô∏è <b>Previous Version:</b> '${{ env.old_tag }}'\nüè∑Ô∏è <b>New Version:</b> '${{ env.latest_tag }}'\n‚è≥ <b>Deployment Time:</b> '${DEPLOY_TIME} sec'\nüöÄ <b>Status:</b> Success!"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM__TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "'${{ secrets.TELEGRAM__CHATID }}'",
            "parse_mode": "HTML",
            "text": "'"$MESSAGE"'"
          }'

      - name: Debug - Store new image tag (update GitHub secret)
        if: env.sync_failed == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Updating LATEST_TAG GitHub secret..."
          gh secret set LATEST_TAG --body="${{ env.latest_tag }}"
          echo "LATEST_TAG secret updated."