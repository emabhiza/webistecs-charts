name: Deploy to ArgoCD

on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "ArgoCD CLI installed."
          echo "Adding $HOME/bin to PATH"
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Debug - Show ArgoCD CLI version
        run: |
          echo "Checking ArgoCD CLI version..."
          argocd version --short
          echo "ArgoCD CLI version checked."

      - name: Install jq
        run: |
          echo "Installing jq for JSON parsing..."
          sudo apt-get update && sudo apt-get install -y jq
          echo "jq installed."

      - name: Debug - Log into ArgoCD
        run: |
          echo "Attempting ArgoCD login..."
          argocd login 192.168.68.107:30007 --username admin --password Gsquad238 --insecure
          echo "Logged into ArgoCD."

      - name: Debug - List ArgoCD Applications
        run: |
          echo "Listing ArgoCD applications..."
          argocd app list
          echo "ArgoCD application list displayed."

      - name: Debug - Get Latest Docker Image Tag
        id: get_image_tag
        run: |
          echo "Checking for the latest Docker image tag..."
          latest_tag=$(curl -s https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/ | jq -r '.results[0].name')
          echo "Latest Docker image tag fetched: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Docker image tag checked."

      - name: Store Previous Image Tag
        id: store_old_tag
        run: |
          old_tag=$(grep 'tag:' webistecs/values.yaml | head -1 | awk '{print $2}' | tr -d '"')
          echo "Previous image tag: $old_tag"
          echo "old_tag=$old_tag" >> $GITHUB_ENV

      - name: Update Helm Chart with Latest Docker Tag for Webistecs Image
        run: |
          echo "Updating webistecs image tag in values.yaml to ${{ env.latest_tag }}..."
          sed -i 's/tag: .*/tag: "${{ env.latest_tag }}"/' webistecs/values.yaml
          echo "Updated values.yaml for webistecs image"
          cat webistecs/values.yaml

      - name: Update Helm Chart with Latest Docker Tag for Migration Job
        run: |
          echo "Updating dbMigrationJob image tag in values.yaml to ${{ env.latest_tag }}..."
          sed -i 's/tag: .*/tag: "${{ env.latest_tag }}"/' webistecs/values.yaml
          echo "Updated values.yaml for dbMigrationJob image"
          cat webistecs/values.yaml

      - name: Commit and push changes to values.yaml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Update webistecs image tag to ${{ env.latest_tag }}"
          git push

      - name: Check if Docker image has changed
        id: image_changed
        run: |
          previous_tag="${{ env.old_tag }}"
          echo "Previous Docker image tag: $previous_tag"
          echo "Latest Docker image tag: ${{ env.latest_tag }}"
          if [[ -z "$previous_tag" || "$previous_tag" != "${{ env.latest_tag }}" ]]; then
            echo "Image has changed. Triggering ArgoCD deployment."
            echo "image_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No change in image. Skipping ArgoCD deployment."
            echo "image_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug - Sync ArgoCD and Check for Failure
        if: steps.image_changed.outputs.image_changed == 'true'
        id: argocd_sync
        continue-on-error: true
        run: |
          echo "Starting ArgoCD sync for 'webistecs'..."
          if ! argocd app sync webistecs; then
            echo "ArgoCD sync failed!"
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "ArgoCD sync complete."
          echo "sync_failed=false" >> $GITHUB_ENV

      - name: Rollback Image Tag if ArgoCD Sync Fails
        if: env.sync_failed == 'true'
        run: |
          echo "Rolling back image tag in values.yaml to previous tag: ${{ env.old_tag }}..."
          sed -i 's/tag: .*/tag: "${{ env.old_tag }}"/' webistecs/values.yaml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add webistecs/values.yaml
          git commit -m "Rollback: Restore image tag to ${{ env.old_tag }} due to failed ArgoCD sync"
          git push
          echo "Rollback complete."

      - name: Install GitHub CLI
        run: |
          echo "Installing GitHub CLI..."
          sudo apt-get update && sudo apt-get install -y gh
          echo "GitHub CLI installed."

      - name: Authenticate GitHub CLI
        run: |
          echo "Authenticating GitHub CLI..."
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
          echo "GitHub CLI authenticated."

      - name: Debug - Store new image tag (update GitHub secret)
        if: steps.image_changed.outputs.image_changed == 'true' && env.sync_failed == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Updating LATEST_TAG GitHub secret..."
          gh secret set LATEST_TAG --body="${{ env.latest_tag }}"
          echo "LATEST_TAG secret updated."
