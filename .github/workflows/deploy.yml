name: ArgoCD Pipeline

on:
  workflow_dispatch:
    inputs:
      trigger_action:
        description: 'Manually trigger ArgoCD sync'
        required: false
        default: 'false'
      environment:
        description: 'Deployment environment (prod or test)'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install ArgoCD CLI
        run: |
          mkdir -p $HOME/bin
          curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.14.4/argocd-linux-arm64
          chmod +x $HOME/bin/argocd
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Load Telegram Function
        run: |
          chmod +x .github/scripts/send_telegram.sh
          echo "source .github/scripts/send_telegram.sh" >> $GITHUB_ENV

      - name: ArgoCD Login
        run: |
          source .github/scripts/send_telegram.sh
          argocd login 192.168.68.107:30007 \
            --username admin \
            --password $ARGOCD_PASSWORD \
            --insecure || {
              send_telegram "‚ùå <b>ArgoCD Login Failed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüö´ Could not login to ArgoCD."
              echo "sync_failed=true" >> $GITHUB_ENV
              exit 1
            }
        env:
          ARGOCD_PASSWORD: ${{ secrets.ARGO_PASSWORD }}
          TELEGRAM__TOKEN: ${{ secrets.TELEGRAM__TOKEN }}
          TELEGRAM__CHATID: ${{ secrets.TELEGRAM__CHATID }}

      - name: Get Latest Docker Image Tag
        id: get_tag
        run: |
          source .github/scripts/send_telegram.sh

          IMAGE_NAME="emabhiza/webistecs"
          AUTH_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER__USERNAME }}", "password": "${{ secrets.DOCKER_HUBPAT }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAGS=$(curl -s -H "Authorization: JWT ${AUTH_TOKEN}" "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=100" | jq -r '.results[].name')

          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            latest_tag=$(echo "$TAGS" | grep -oP '^v\d+\.\d+\.\d+' | sort -V | tail -n 1)
          else
            latest_tag=$(echo "$TAGS" | grep -oP '^test-\d+\.\d+\.\d+' | sort -V | tail -n 1)
          fi

          if [ -z "$latest_tag" ]; then
            send_telegram "‚ùå <b>Deployment Failed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüö´ No suitable Docker tag found."
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Set Helm & App Info
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "VALUES_FILE=webistecs/values-prod.yaml" >> $GITHUB_ENV
            echo "ARGO_APP=webistecs" >> $GITHUB_ENV
          else
            echo "VALUES_FILE=webistecs/values-test.yaml" >> $GITHUB_ENV
            echo "ARGO_APP=webistecs-test" >> $GITHUB_ENV
          fi

      - name: Check if Tag Already Deployed
        run: |
          source .github/scripts/send_telegram.sh
          old_tag=$(grep 'tag:' $VALUES_FILE | head -1 | awk '{print $2}' | tr -d '"')
          echo "old_tag=$old_tag" >> $GITHUB_ENV

          if [[ "$old_tag" == "$latest_tag" ]]; then
            echo "same_tag=true" >> $GITHUB_ENV
            send_telegram "‚ö†Ô∏è <b>Same tag already deployed</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüè∑Ô∏è <b>Tag:</b> $latest_tag"
          else
            echo "same_tag=false" >> $GITHUB_ENV
          fi

      - name: Wait for Docker Image
        run: |
          source .github/scripts/send_telegram.sh
          for i in {1..10}; do
            if curl -s "https://hub.docker.com/v2/repositories/emabhiza/webistecs/tags/${latest_tag}" | jq -e .; then
              echo "‚úÖ Image is available!"
              exit 0
            fi
            echo "Waiting for Docker image..."
            sleep 30
          done
          send_telegram "‚ùå <b>Image Not Found</b>" "üè∑Ô∏è <b>Tag:</b> $latest_tag"
          echo "sync_failed=true" >> $GITHUB_ENV
          exit 1

      - name: Notify Start
        run: |
          source .github/scripts/send_telegram.sh
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV
          send_telegram "üöÄ <b>Deployment Started</b>" "üë§ <b>User:</b> ${{ github.actor }}\nüì¶ <b>App:</b> $ARGO_APP\nüè∑Ô∏è <b>Tag:</b> $latest_tag"

      - name: Update Tag in Helm Chart
        if: env.same_tag != 'true'
        run: |
          sed -i 's/tag: .*/tag: "'${{ env.latest_tag }}'"/' "${{ env.VALUES_FILE }}"

      - name: Commit & Push Helm Change
        if: env.same_tag != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Update ${{ github.event.inputs.environment }} tag to $latest_tag"
          git push

      - name: ArgoCD Sync
        run: |
          source .github/scripts/send_telegram.sh
          if ! argocd app sync --force $ARGO_APP; then
            send_telegram "‚ùå <b>ArgoCD Sync Failed</b>" "üì¶ <b>App:</b> $ARGO_APP"
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Check Sync Status
        run: |
          STATUS=$(argocd app get $ARGO_APP --output json | jq -r '.status.operationState.phase')
          if [[ "$STATUS" != "Succeeded" ]]; then
            send_telegram "‚ùå <b>Deployment Failed</b>" "üì¶ <b>App:</b> $ARGO_APP\nStatus: $STATUS"
            echo "sync_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Rollback on Failure
        if: env.sync_failed == 'true'
        run: |
          sed -i 's/tag: .*/tag: "'$old_tag'"/' $VALUES_FILE
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Rollback: Restore to $old_tag"
          git push

      - name: Final Telegram Summary
        run: |
          source .github/scripts/send_telegram.sh
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          if [[ "$sync_failed" == "true" ]]; then
            send_telegram "‚ùå <b>Deployment Failed</b>" "Rollback complete.\nDuration: ${DURATION}s"
          elif [[ "$same_tag" != "true" ]]; then
            send_telegram "‚úÖ <b>Deployment Succeeded</b>" "üì¶ <b>App:</b> $ARGO_APP\nüè∑Ô∏è <b>From:</b> $old_tag ‚Üí $latest_tag\n‚è±Ô∏è ${DURATION}s"

      - name: Update GitHub Secret with Latest Tag
        if: env.sync_failed == 'false' && env.same_tag != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: gh secret set LATEST_TAG --body="$latest_tag"
